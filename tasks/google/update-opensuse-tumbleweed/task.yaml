summary: Update opensuse tumbleweed image with the latest updates and test dependencies

systems: [opensuse-tumbleweed-64-base]

environment:
    TARGET_SYSTEM: opensuse-tumbleweed-64

execute: |
    . "$TESTSLIB/google.sh"
    . "$TESTSLIB/names.sh"
    . "$TESTSLIB/pkgdb.sh"
    . "$TESTSLIB/utils.sh"

    if [ "$SPREAD_REBOOT" = 0 ]; then
        # Make the upgrade and install the dependencies needed to run snapd tests
        distro_update_package_db
        distro_upgrade_packages
        install_test_dependencies "$TARGET_SYSTEM"
        remove_pkg_blacklist

        # Make sure we install the 5.3.18-lp152.19.2 kernel to prevent deadlock doing govendor sync
        # Bug associated https://bugzilla.kernel.org/show_bug.cgi?id=203317
        prefered_kernel="$(rpm -qa kernel-default | grep kernel-default-5.3.18)"
        if [ -z "$prefered_kernel" ]; then
            echo "Needed 5.3.18 kernel not available, exiting..."
            exit 1
        fi
        grub2-set-default 'gnulinux-5.3.18-lp152.19-default-advanced-5a843a8f-5dd4-4356-aad3-7838c6c27965'
        for kernel in $(rpm -qa kernel-default | grep -v kernel-default-5.3.18); do
            rpm -e "$kernel"
        done
        grub2-mkconfig -o /boot/grub2/grub.cfg
        REBOOT
    fi

    # Create systemd unit to restart the failing service
    tee /usr/lib/systemd/system/systemd-vconsole-setup-rexec.service << EOF
    [Unit]
    Description=Setup Virtual Console Reexecution
    After=local-fs.target network-online.target network.target rsyslog.service
    After=google-instance-setup.service
    Wants=local-fs.target network-online.target network.target
    Requires=network.target
    PartOf=network.service
    ConditionPathExists=/dev/tty0

    [Service]
    Type=simple
    Restart=on-failure
    RestartSec=5
    ExecStart=/usr/bin/systemctl restart systemd-vconsole-setup.service

    [Install]
    WantedBy=multi-user.target
    EOF

    systemctl daemon-reload
    systemctl enable systemd-vconsole-setup-rexec.service

    # Clean disk before create the shapshot
    clean_machine

    # Create a new image based on the current disk
    create_image_from_disk_with_os_features "$IMAGE" "$FAMILY" "$DESCRIPTION" "$DISK" "UEFI_COMPATIBLE"

restore: |
    . "$TESTSLIB/google.sh"
    . "$TESTSLIB/names.sh"

    delete_snapshot "$DISK"
    delete_deprecated_images
